/**
 * Business Model extends location myc location model
 * @module myc-business-model
 * @requires myc-location-model
*/
YUI.add('myc-business-model', function(Y){
    var Business = function(){
        Business.superclass.constructor.apply(this, arguments);
    };

    var defaults={
        mapImageUrlPrefix : 'http://gws2.maps.yahoo.com/MapImage?appid='+Y.myc.config('ymaps.appid')+'&'
    };

    // Attributes and static properties for myc-business model which we are consuming
    Business.ATTRS = {
        "addr" : null,
        "city" : null,
        "closed_business" : null,
        "crossstreet" : null,
        "desc" : null,
        "detailurl" : null,
        "distance" : null,
        "dphone" : null, // phone number without code styling
        "dtitle" : null, // title stripped of html tags
        "hiconf" : null,
        "hideaddr" : null, // not using
        "id" : null,
        "lat" : {
            setter: function(value){
                if (typeof value === 'string'){
                    return parseFloat(value, 10);
                }
                return value;
            }
        },
        "listing_status" : null,
        "lon" : {
            setter: function(value){
                if (typeof value === 'string'){
                    return parseFloat(value, 10);
                }
                return value;
            }
        },
        "mapurl" : null,
        "nrating" : null,
        "nreview" : null,
        "phone" : null,
        "rating" : null,
        "readreviewsurl" : null,
        "reviewurl" : null,
        "state" : null,
        "title" : null,
        "type" : null,
        "website" : null,
        "websitelabel" : null,
        "zip" : null,
        "interpretation" : null,
        "webLabel" : null
    };

    Business.NAME = 'business';

    Y.extend(Business, Y.myc.Location.Model,{
        /**
        * The initializer function will run when a view is instantiated
        * Has a bunch of helper functions to convert the location to various formats
        * @method initializer
        * @return {void}
        */
        initializer: function(config){
            var t = this;

            if(!config.id){
                t.set('id',this.generateClientId());
            }
            // convert values to float
            Y.each(['lat', 'lon', 'rating'], function(a){
                if(Y.Lang.isNumber(parseFloat(t.get(a),10))){
                    t.set(a, parseFloat(t.get(a),10));
                }
            });

            Y.each(['hiconf'], function(a){
                if(Y.Lang.isNumber(parseInt(t.get(a),10))){
                    t.set(a, parseInt(t.get(a),10));
                }
            });

            var webLabel = t.get('websitelabel') || (t.get('website') && t.get('website')['@label']) || null;
            if (webLabel){
                webLabel = webLabel.replace(/^http(s)?:\/\//,'').replace(/\/$/,'');
                if (webLabel.length>28){
                    webLabel = webLabel.slice(0,25);
                    webLabel = webLabel + '...';
                }
            }
            t.set('webLabel', webLabel);
        },
        /**
        * get business specific display value
        * @method displayValue
        * @return {string} dtitle
        */
        displayValue:function(){
            //return this.get('title'); // switched to dtitle as title has html tag present within it
            return this.get('dtitle');
        },
        /**
        * @method getName
        * @return {string} name
        */
        getName : function(){
            var name = [], t = this;
            Y.each(['city', 'state'], function(l){
                t.get(l) && name.push(t.get(l));
            });
            if(name.length>0){
                return name.join(', ');
            } else {
                return t.address();
            }
        },
        /**
        * @method getNamedAddress
        * @return {string} displayValue+address
        */
        getNamedAddress : function(term){
            return this.displayValue()+(term || ', ')+this.address();
        },
        /**
        * get business specific address
        * @method address
        * @return {string} address
        */
        address:function(){
            var addr='';

            if(this.get('addr')){
                addr += this.get('addr')+', ';
            }
            if(this.get('city')){
                addr += this.get('city')+', ';
            }
            if(this.get('state')){
                addr += this.get('state');
            }
            return addr;
        },
        /**
        * get full business address including the zip code
        * @method address
        * @return {string} address
        */
        fullAddress:function(){
            if (this.get('zip')) {
                return this.address() + ' ' + this.get('zip');
            } else {
                return this.address();
            }
        },
        /**
        * get mapImage URL for business location
        * @method mapImage
        * @return {string} mapImage URL
        */
        mapImage:function(){
            if (this.get('full_size_photos') && this.get('full_size_photos').photo) {
                var full = null;
                if (Y.Lang.isArray(this.get('full_size_photos').photo)) {
                    full = this.get('full_size_photos').photo[0].full;
                } else {
                    full = this.get('full_size_photos').photo.full;
                }
                if (parseInt(full.width, 10) >= parseInt(full.height, 10)) {
                    return 'data-src="' + full.url + '" style="width:100px;"';
                } else {
                    return 'data-src="' + full.url + '" style="height:100px;"';
                }
            }
            var mapImageUrl = defaults.mapImageUrlPrefix + Y.QueryString.stringify({
                clat:this.getLatitude(),
                clon:this.getLongitude(),
                zoom: '16',
                imw: '100',
                imh: '100',
                poi: (',,ll;,mrk_str,'+this.getLatitude()+','+this.getLongitude()),
                mflags: 'ykmc'
            });
            return 'data-src="' + mapImageUrl + '"';
        },
        /**
        * @method getLatitude
        * @return {tl} top left geo location object.
        */
        getLatitude : function(){
            return this.get('lat');
        },
        /**
        * @method getLongitude
        * @return {tl} top left geo location object.
        */
        getLongitude : function(){
            return this.get('lon');
        },
        /**
        * convert a business model to a location model
        * @method toLocation
        * @return {object} myc location model
        */
        toLocation:function(){
            var t = this,
                location = new Y.myc.Location.Model({
                    latitude: t.getLatitude(),
                    longitude: t.getLongitude(),
                    line1: t.get('addr'),
                    line2: t.get('city'),
                    line3: t.get('state')
                });
            return location;
        }
    },{
        /**
        * statics
        * @method validate
        * @return {void}
        */
        validate:function(){}
    });

    Y.namespace('myc.Business');
    Y.myc.Business.Model = Business;

},'@VERSION@',{requires:['myc-location-model']});

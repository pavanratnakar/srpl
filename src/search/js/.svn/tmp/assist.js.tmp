/**
 * TODO : Enhance plugin
 * search assist plugin
 * @plugin myc-search-assist-plugin
 * @requires plugin, autocomplete, autocomplete-highlighters, autocomplete-filters, querystring, myc-jsonp
*/
YUI.add('myc-search-assist-plugin', function(Y){

    var instances = [];

    var SearchAssist = function(config){
        var t = this,
            parentContainer;

        SearchAssist.superclass.constructor.apply(t, arguments);
        t.host = config.host;

        t.host.plug(Y.Plugin.AutoComplete, {
            minQueryLength: 1,
            inputNode: t.host,
            // tabSelect: true,
            maxResults: Y.myc.config('assist.autocomplete.maxResults'),
            // [bug 5920199] Added a custom filter which is invoked by the resultListLocator, only for the locdrop locations
            // resultFilters: Y.bind(t.resultFilters, t), //Y.myc.config('assist.autocomplete.resultFilters'),
            resultFormatter: Y.bind(t.resultFormatter, t),
            resultHighlighter: Y.myc.config('assist.autocomplete.resultHighlighter'),
            resultTextLocator: Y.myc.config('assist.autocomplete.resultTextLocator'),
            resultListLocator: Y.bind(t.resultListLocator, t),
            source: Y.bind(t.source, t)
        });

        // Adding classes used for overwriting the styling of autocomplete plugin
        t.host.ac.get('boundingBox').addClass('search-assist');
        t.host.ac.get('contentBox').addClass('search-assist-content');
        t.host.ac.get('listNode').addClass('search-assist-list');

        var nodeEvents = t.host.ac.get('inputNode').on({
            focus: function(){
                // close other search assissts
                Y.each(instances, function(sa, i){
                    if (sa !== t) {
                        sa.focussed = false;
                        sa.host.ac && sa.host.ac.hide();
                    } else {
                        sa.focussed = true;
                        sa.blurred = false;
                    }
                });
            },
            keydown: function(e){
                if (e.charCode === 13) {
                    t.host.ac.hide();
                }
            }
        });
        t.eventListeners.push(nodeEvents);

        var acEvents = t.host.ac.before('select', function(e){
            // Bug - 6017169 The selected location is not valid, is just a place holder for the default location
            if (e.result.raw.val === Y.myc.config('assist.noDefaultLocationText')){
                e.preventDefault();
            } else {
                parentContainer = t.host.ac.get('boundingBox').one('.search-assist-list');
                t.setAttrs({
                    'userInput' : t.host.get('value'),
                    'assistLength' : parentContainer.get('children').size(),
                    'selectionPosition' : parentContainer.get('children').indexOf(e.itemNode)
                });
                // This is to ensure that on selection the value that is used is the raw.val
                e.result.text = e.result.raw.val;
                // added to ensure host value is updated. There were cases where host value was
                // not being updated
                t.host.set('value',e.result.raw.val);
            }
        }, this);
        t.eventListeners.push(acEvents);

        t.addDDNode();
        t.addManageLink();
        instances.push(t);

        var stateChangeListener = Y.on('state:change',function(e){
            try {
                Y.later(1000, {}, function(){
                    t.host.ac && t.host.ac.hide();
                });
            } catch(e){
                //DO NOTING
            }
        });
        t.eventListeners.push(stateChangeListener);
    };
    // Attributes and static properties for search assist
    SearchAssist.ATTRS = {
        latitude : null, // since we dont try performing any calculations on it maintaining it as string
        longitude : null, // since we dont try performing any calculations on it maintaining it as string
        p2 : null,
        userLocations : {
            getter: function(){
                return Y.myc.Locdrop.Model.model().toArray();
            }
        },
        userInput : null,
        assistLength : null,
        selectionPosition : null
    };

    SearchAssist.NAME = 'searchAssist';
    SearchAssist.NS = 'assist';

    Y.extend(SearchAssist, Y.Base,{
        eventListeners : [],
        initializer : function(config){
            var t = this,
                eventPrefix = null;

            config = config || {};

            if (config.p2) {
                t.set('p2',config.p2);
            }
            t.eventListeners = [];
        },
        /**
        * @method destructor
        * @return {void}
        */
        destructor : function(){
            this.eventListeners = Y.myc.util._destructor(this.eventListeners);
        },
        /**
        * @method addDDNode
        * @return {void}
        */
        addDDNode: function(){
            var t = this,
                input = this.host.ac.get('inputNode'),
                el = Y.Node.create('<button type="button" title="Show saved and previously searched locations" class="image assist-dd"><span class="hide-text">open</span></button>');

            input.insert(el, 'after');
            el.on('click', function(e){
                // if(Y.myc.util.visible(Y.one('.search-assist')))
                t.host.focus();
                t.host.ac.sendRequest('');

            });
            this.ddNode = el;
        },
        /**
        * @method addManageLink
        * @return {void}
        */
        addManageLink: function(){
            var t = this,
                boundingBoxManage,
                boundingBoxManageLink;

            var manageLink = Y.Node.create(Y.myc.Search.templates.manageLink({
                                manageLink: Y.Lang.sub(Y.myc.config('assist.manageLocationsUrl'), {
                                    'locale' : 'en-US',
                                    'done' : encodeURIComponent(document.location.href)
                                })
                            }));

            var resultsList = t.host.ac.get('contentBox').one('ul');
            resultsList.insert(manageLink, 'after');

            boundingBoxManage = t.host.ac.get('boundingBox').delegate('click', function(e){
                window.open(Y.Lang.sub(Y.myc.config('assist.manageLocationsUrl'), {
                                    'locale' : 'en-US',
                                    'done' : encodeURIComponent(document.location.href)
                                }));
            }, '.manage, .no-location');
            t.eventListeners.push(boundingBoxManage);

            // Disable the default action for the click on the anchor tag as the clicking on the div does the same work
            boundingBoxManageLink = t.host.ac.get('boundingBox').delegate('click', function(e){
                e.preventDefault();
            }, '.manage a, .no-location a');
            t.eventListeners.push(boundingBoxManageLink);
        },
        /**
        * @method source
        * @param {query} query
        * @param {function} callback
        * @return {void}
        */
        source: function(query, callback){
            var t = this,
                maxResults = Y.myc.config('assist.autocomplete.maxResults');

            if (Y.Lang.isObject(query)) {
                maxResults = query.maxResults;
                query = query.query;
            }

            t._query = Y.Lang.trim(query);
            // Adding width calculation here as this is the entry point for autocomplete
            t.host.ac.set('width', t.host.get('offsetWidth'));

            var url = Y.myc.config('assist.server') + '/gossip-us-lobiz?output=sd1&' + Y.QueryString.stringify({
                command : query,
                p1 : [this.get('longitude'),this.get('latitude')].join(','),
                nresults : maxResults
            });
            if (this.get('p2')) url += '&'+Y.QueryString.stringify({p2:this.get('p2')});

            if (!query) {
                callback({});
            } else {
                Y.myc.jsonp(url,{
                    on:{
                        success: function(data){
                            callback(data);
                        },
                        failure: function(err){
                            callback(null);
                        },
                        timeout: function(err){
                            callback(null);
                        }
                    }
                });
            }
        },
        /**
        * @method resultFilter - Filter to filter out the saved locations only by matching against the unique queryTokens
        * @param {array} queryTokens
        * @param {string} address
        * @return {boolean} true if the match is positive
        */
        resultFilter: function(queryTokens, resultText) {

            var resultTokens = Y.Text.WordBreak.getUniqueWords(resultText, {ignoreCase: true}),
                i, j, qt, match, matches = true;

            for (i = 0; i < queryTokens.length && matches; i++){
                qt = queryTokens[i];
                match = false;
                for (j = 0; j < resultTokens.length && !match; j++){
                    if (resultTokens[j].indexOf(qt) === 0) {
                        match = true;
                    }
                }
                if (!match) {
                    matches = false;
                }
            }

            return matches;
        },
        /**
        * @method resultFilters - custom subWordMatch to not filter out the gossip results, it is not being used anymore
        * @param {string} query
        * @param {array} results
        * @return {array} results
        */
        resultFilters: function(query, results) {
            if (!query) { return results; }

            var queryWords = Y.Text.WordBreak.getUniqueWords(query, {ignoreCase: true});

            return Y.Array.filter(results, function (result) {
                var resultText = result.text.toLowerCase();
                var resultType = result.raw.type;

                return Y.Array.every(queryWords, function (queryWord) {
                    return resultType === "gossip" || resultText.indexOf(queryWord) !== -1;
                });
            });
        },
        /**
        * @method resultListLocator
        * @param {hash} response
        * @return {array} results
        */
        resultListLocator: function(response){
            var t = this;
            var results = [];
            var gossipResults = Y.myc.util.atPath(response, 'r');
            var primeLocations = [];
            var savedLocations = [];
            var queryWords = Y.Text.WordBreak.getUniqueWords(t._query, {ignoreCase: true});
            var _result;
            var includeLocation;
            var locations = this.get('userLocations');
            var i;
            var maxResults = Y.myc.config('assist.autocomplete.maxResults'), maxPrimeResults = Y.myc.config('assist.autocomplete.maxPrimeResults');
            // Include the saved locations in the search assist autocomplete
            for (i = 0; i < locations.length; i++) {
                _result = {
                            key: (locations[i].get('lbl'))? locations[i].get('lbl') + ' (' + locations[i].displayValue() + ')' : locations[i].displayValue(),
                            val: locations[i].displayValue(),
                            type: locations[i].get('type'),
                            obd : '',
                            lbl: locations[i].get('lbl')
                        };
                if (!t._query && !gossipResults) {
                    results.push(_result);
                } else {
                    // Bug - 6017169 Locdrop locations includes the synthetic location object
                    if (locations[i].get('type') === 'default' && locations[i].displayValue() === Y.myc.config('assist.noDefaultLocationText')) {
                        // Do Nothing, don't add it to any of the lists as it is not a location
                    } else {
                        if (locations[i].get('lbl') || locations[i].get('type') === "current" || locations[i].get('type') === "default") {
                            t.resultFilter(queryWords, _result.key.toLowerCase()) && primeLocations.push(_result);
                        } else {
                            t.resultFilter(queryWords, _result.key.toLowerCase()) && savedLocations.push(_result);
                        }
                    }
                }
            }

            if (gossipResults && !Y.Lang.isArray(gossipResults)) {
                gossipResults = Y.Array(gossipResults);
            }

            if (gossipResults) {
                while ((primeLocations.length + gossipResults.length) > maxResults && primeLocations.length > maxPrimeResults) {
                    primeLocations.pop();
                }
                results = primeLocations;
                for (i = 0; i < gossipResults.length && results.length < maxResults; i++) {
                    value = gossipResults[i];
                    includeLocation = true;
                    // Just to filter out the duplicates if obtained from gossip
                    Y.each(primeLocations, function(_value, _index){
                        if (_value.val === value.k) {
                            includeLocation = false;
                        }
                    });
                    if (includeLocation) {
                        results.push({
                            key: value.k,
                            val: value.k,
                            type: "gossip",
                            obd : value.d || null,
                            lbl: null
                        });
                    }
                }
            }
            if (t.focussed === false || t.disabled === true) {
                return [];
            }

            if (savedLocations && results.length < maxResults) {
                for (i = 0; i < savedLocations.length && results.length < maxResults; i++) {
                    value = savedLocations[i];
                    includeLocation = true;
                    // Just to filter out the duplicates if have been aded above
                    Y.each(results, function(_value, _index){
                        if (_value.val === value.val) {
                            includeLocation = false;
                        }
                    });
                    if (includeLocation) {
                        results.push(value);
                    }
                }
            }
            return results;
        },
        /**
        * @method resultFormatter
        * @param {string} query
        * @param {array} results
        * @return {array} results
        */
        resultFormatter: function(query, results){
            var t = this;
            var iconSpacing = false;
            if (t.host.hasClass('search-icon') || query === "") {
                iconSpacing = true;
            }
            if (!iconSpacing) {
                iconSpacing = Y.Array.some(results, function(value, index){
                    if(value.raw.type === 'current' || value.raw.type==='default'){
                        return true;
                    }
                });
            }
            var resultsArray = [];
            Y.each(results, function(value, index){
                // if (value.raw.lbl) {
                //     value.display = value.raw.lbl + ' (' + value.display + ')';
                //     value.highlighted = value.raw.lbl + ' (' + value.highlighted + ')';
                // }
                if (value.raw.key === Y.myc.config('assist.noDefaultLocationText')){
                    resultsArray.push(Y.myc.Search.templates.noDefaultLocation({
                        manageLink: Y.Lang.sub(Y.myc.config('assist.manageLocationsUrl'), {
                                    'locale' : 'en-US',
                                    'done' : encodeURIComponent(document.location.href)
                                }),
                        noDefaultLocationText: Y.myc.config('assist.noDefaultLocationText')
                    }));
                } else {
                    resultsArray.push(Y.myc.Search.templates.location({
                        location: value,
                        iconSpacing: iconSpacing
                    }));
                }
            });

            if (query !== "") {
                t.host.ac.get('boundingBox').addClass("hide-manage-link");
            } else {
                t.host.ac.get('boundingBox').removeClass("hide-manage-link");
            }

            return resultsArray;
        },
        /**
         * Not used
         * @method clear
         * @return {void}
        */
        clear: function(){}
    });

    Y.namespace('myc.Plugin');
    Y.myc.Plugin.SearchAssist = SearchAssist;

},'@VERSION@',{requires:['plugin','myc-config','autocomplete','autocomplete-highlighters','autocomplete-filters','querystring','myc-jsonp','myc-util','myc-search-templates','myc-search-css']});
/**
 * search plugin
 * @plugin myc-search-plugin
 * @requires myc-search-model, plugin, myc-deferred, myc-search-css
*/
YUI.add('myc-search-plugin', function(Y){

    // patching up search model with a little viewery. Acts as a binder.
    var SearchPlugin = function(config){
        this.host = config.host;
        this.inputNode = (this.host._node.nodeName === 'INPUT' ? this.host : this.find('input')) || Y.Node.create('<input class="search"/>');
        SearchPlugin.superclass.constructor.apply(this, arguments);
    };

    SearchPlugin.NAME = 'searchPlugin';
    SearchPlugin.NS = 'search';
    // Attributes and static properties for search plugin
    SearchPlugin.ATTRS = {
        latitude:null,
        longitude:null,
        // Bug: 6136327 Radius & Location suppressed for sprint 5
        // radius:null,
        // location:null,
        local_count:null,
        obd:null
    };

    Y.extend(SearchPlugin, Y.myc.Search.Model, {
        /**
        * The initializer function will run when the plugin is instantiated
        * Plugins enter key event submission to host - can be configured
        * @method initializer
        * @return {void}
        */
        initializer:function(config){
            var t = this;

            if (config.local_count) {
                t.set('local_count',config.local_count);
            }
        },
        /**
        * Force search query
        * @method _query
        * @return {void}
        */
        _query: function(e){
            e = e || {};
            var t = this;
            if (e.type === "current") {
                // if current location, dont do the query, directly use location either from current location or locdrop
                var location = Y.myc.Currloc.Model.model().get('location') || ((Y.myc.config('locdrop.currentLocationGws')) ? Y.myc.config('locdrop.currentLocationGws') : (Y.myc.config('locdrop.currentCityLocation')) ? new Y.myc.Location.Model(Y.myc.config('locdrop.currentCityLocation')) : currentLocation);
                if (!location.get('id')) {
                    location.set('id', 'id_current');
                }
                location.set('type', 'current');
                t.fire('selected:currentLocation');
                t.complete(null,{
                    interpretation : {
                        Task : 'address_search'
                    },
                    locations : [location]
                });
            } else if (Y.Lang.trim(t.host.get('value'))) { // only query if host has value
                t.fire('results');
                t.query(function(err, data){
                    t.complete.apply(t, arguments);
                });
            }
        },
        /**
        * Query arguments
        * @method queryArgs
        * @params {function} callback
        * @return {hash} args
        */
        queryArgs:function(callback){
            var args = [Y.merge({},{
                obq:this.host.get('value'),
                userLat: this.get('latitude'),
                userLon: this.get('longitude'),
                userRadius: this.get('radius'),
                userLocation: this.get('location'),
                local_count: this.get('local_count') || Y.myc.config('search.local_count'),
                obd : this.get('obd')
            })].concat([callback]);
            return args;
        },
        /**
        * @method query
        * @params {function} callback
        * @return {void}
        */
        query:function(callback){
            SearchPlugin.superclass.constructor.prototype.query.apply(this, this.queryArgs(callback));
        },
        /**
        * when query is complete
        * fires either found or error
        * @method complete
        * @params {function} err
        * @params {data} data
        * @return {void}
        */
        complete:function(err, data){
            if (err) {
                this.fire('error', {err:err, data:data});
                return;
            }
            this.fire('found', {
                location : data.location,
                local : data.local,
                directions : data.directions,
                interpretation : data.interpretation
            });
            return;
        },
        /**
        * @method clear
        * @return {void}
        */
        clear:function(){
            this.setAttrs({
                obd : null
            });
        },
        /**
        * @method destructor
        * @return {void}
        */
        destructor : function(){}
    });

    Y.namespace('myc.Plugin');
    Y.myc.Plugin.Search = SearchPlugin;

},'@VERSION@',{requires:['myc-search-model', 'plugin','myc-deferred','myc-search-css']});
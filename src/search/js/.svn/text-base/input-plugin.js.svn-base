/**
 * input plugin
 * @plugin myc-input-plugin
 * @requires
    plugin
    myc-search-assist-plugin,
    myc-search-plugin,
    myc-locdrop-plugin
*/
YUI.add('myc-input-plugin', function(Y){

    var InputPlugin = function(config){
        this.host = config.host;
        this.inputNode = (this.host._node.nodeName === 'INPUT' ? this.host : this.find('input')) || Y.Node.create('<input class="search"/>');
        InputPlugin.superclass.constructor.apply(this, arguments);
    };

    InputPlugin.NAME = 'inputPlugin';
    InputPlugin.NS = 'inputplugin';
    // Attributes and static properties for search plugin
    InputPlugin.ATTRS = {
        type:null, // onebox / directionSearch
        location:null,
        via:null
    };

    Y.extend(InputPlugin, Y.Base, {
        eventListeners : [],
        /**
        * @method updateLatLon
        * @return {void}
        */
        updateLatLon : function(latitude,longitude, radius){
            var t = this;

            t.inputNode.assist.setAttrs({
                'latitude' : latitude,
                'longitude' : longitude
            });

            t.inputNode.search.setAttrs({
                // Bug: 6136327 Radius & Location suppressed for sprint 5
                // 'location' : null,
                'latitude' : latitude,
                'longitude' : longitude
                // Bug: 6136327 Radius & Location suppressed for sprint 5
                // 'radius' : radius
            });
        },
        /**
        * @method updateLatLon
        * @return {void}
        */
        updateLocation : function(location){
            var t = this;

            t.inputNode.search.setAttrs({
                'location' : location
            });
        },
        /**
        * @method updateP2
        * @return {void}
        */
        updateP2 : function(p2){
            var t = this;

            t.inputNode.assist.setAttrs({
                'p2' : p2
            });
        },
        /**
        * @method locationChange
        * @return {void}
        */
        locationChanged : function(){
            if (this.get('type') === 'directions' && this.get('location') && this.host.get('value') !== this.get('location').getNamedAddress()) {
                this.setAttrs({
                    location : null
                });
                this.fire('location:changed');
            }
        },
        /**
        * @method valueChanged
        * @return {void}
        */
        valueChanged : function(){
            this.clear();
            this.fire('value:changed');
        },
        /**
        * @method initEvents
        * @return {void}
        */
        initEvents : function(config){
            var t = this,
                keyListener,
                updateLatLonListener,
                updateLocationListener,
                eventPrefix,
                acAfterListener,
                obd,
                foundListener,
                resolutionDetails,
                location,
                locationQuality;

            keyListener = t.inputNode.on({
                'keydown' : function(e){
                    if (e.charCode === 13) {
                        if (t.get('via')!=='assistKey') {
                            e.stopPropagation();
                            e.preventDefault();
                            t._query(e);
                        }
                        t.set('via','regular');
                    } else {
                        t.valueChanged();
                    }
                },
                'keyup' : function(e){
                    t.locationChanged();
                }
            });
            t.eventListeners.push(keyListener);

            updateLatLonListener = Y.on('myc:update:latlon',function(e){
                eventPrefix = e.context._eventPrefix;
                // update only direction search assist
                if ((eventPrefix === 'directionFormPlugin') && t.get('type')==='directions' && e.p2) {
                    t.updateLatLon(e.latitude,e.longitude);
                    t.updateP2(e.p2);
                }
                // if directions origin box and not direction form plugin event
                else if (e.nodeType === 'origin' && t.get('type') === 'directions' && eventPrefix !== 'directionFormPlugin') {
                    t.updateLatLon(e.latitude,e.longitude);
                }
                // if one box and not direction form plugin event
                else if (t.get('type') === 'onebox' && eventPrefix !== 'directionFormPlugin') {
                    t.updateLatLon(e.latitude, e.longitude);
                    // Bug: 6136327 Radius & Location suppressed for sprint 5
                    // t.updateLatLon(e.latitude, e.longitude, e.radius);
                }
            });
            t.eventListeners.push(updateLatLonListener);

            // Bug: 6136327 Radius & Location suppressed for sprint 5
            // updateLocationListener = Y.on('myc:update:location', function(e){
            //     t.updateLocation(e.location);
            // });
            // t.eventListeners.push(updateLocationListener);

            acAfterListener = t.inputNode.ac.after('select',function(e){
                t.valueChanged();
                t.locationChanged();
                if (e.originEvent.type === 'click') {
                    t.set('via','assistClick');
                } else {
                    t.set('via','assistKey');
                }
                obd = e.itemNode.one('.location').getData('obd');
                t._query({
                     'obd' : obd,
                     'type' : e.itemNode.one('.location').one('.current-icon') ? 'current' : ''
                });
            });
            t.eventListeners.push(acAfterListener);

            foundListener = t.inputNode.search.after('found',function(e){
                e = e || {};
                resolutionDetails = {};
                if (e.interpretation && e.interpretation.Task === 'business') {
                    t.fire('found',{
                        type : 'business',
                        location : e.location.locations[0],
                        local : e.local
                    });
                    resolutionDetails = {
                        type : 'business',
                        woeid : e.location.locations[0].get('woeid'),
                        category : e.local.details.business,
                        localsCount : e.local.businesses.length,
                        state : (e.local.businesses.length > 0) ? 'success' : 'fail'
                    };
                } else if (e.directions || ( e.interpretation && e.interpretation.Task === 'driving_directions')) {
                    t.fire('found',{
                        type : 'directions',
                        directions : e.directions,
                        submit : true // forcing directions to submit form
                    });
                    resolutionDetails = {
                        type : 'directions',
                        origin : e.interpretation.origin,
                        destination : e.interpretation.destination,
                        state : 'success'
                    };
                } else if (e.interpretation && e.interpretation.Task === 'address_search') {
                    location = e.location.locations[0];
                    if ((location && ( location.get('countrycode') && (location.get('countrycode') !== Y.myc.config('env.countrycode')) || (location.get('country') !== Y.myc.config('env.country'))))) {
                        t.inputNode.assist.set('p2','-biz');
                    } else {
                        t.inputNode.assist.set('p2','');
                    }
                    t.fire('found',{
                        type : 'location',
                        locations : e.location.locations,
                        local : e.local // bussiness at address
                    });
                    locationQuality = location.getQuality();
                    resolutionDetails = {
                        type : 'location',
                        woeid : location.get('woeid'),
                        state : (locationQuality === 0) ? 'fail' : ((locationQuality === 50) ? 'substitution' : 'success'),
                        disambiguation : (e.location.locations && e.location.locations.length > 1) ? '1' : '0'
                    };
                } else {
                    t.fire('found',{
                        type : 'location',
                        locations : null
                    });
                    resolutionDetails = {
                        type : 'notFound'
                    };
                }

                Y.fire('searchSelect',{
                    resolutionDetails : resolutionDetails,
                    inputType : t.get('type'),
                    q : t.inputNode.assist.get('userInput'),
                    suggCount : t.inputNode.assist.get('assistLength'),
                    suggSel : t.inputNode.get('value'),
                    suggPos : t.inputNode.assist.get('selectionPosition')+1,
                    userLat : t.inputNode.assist.get('latitude'),
                    userLon : t.inputNode.assist.get('longitude'),
                    usingSA : t.inputNode.search.get('obd') ? true : false,
                    appId : Y.myc.config('ymaps.appid')
                });
            });

            t.eventListeners.push(foundListener);
        },
        /**
        * @method _fireQuery
        * @return {void}
        */
        _fireQuery : function(e,sa){
            this.fire('select',{
                'sa' : sa
            });
            this.inputNode.search._query(e);
        },
        /**
        * @method _query
        * @return {void}
        */
        _query : function(e){
            var inputValue = Y.Lang.trim(this.inputNode.get('value'));

            if (inputValue) {
                var t = this;
                e = e || {};
                // added for gossip -> onebox talking
                // if d is not available from search assist, reset it to null
                if (e.obd) {
                    t.inputNode.search.set('obd',e.obd);
                }
                if (t.inputNode.search.get('obd')) {
                    t._fireQuery(e,true);
                } else if (Y.myc.config('search.assistHelp')) {
                    t.inputNode.assist.source({query:inputValue,maxResults:1},function(e){
                        if (e && e.r[0] && e.r[0].k.toLowerCase() === inputValue.toLowerCase()) {
                            t.inputNode.search.set('obd',e.r[0].d);
                        }
                        t._fireQuery(e,false);
                    });
                } else {
                    t._fireQuery(e,false);
                }
            }
        },
        /**
        * The initializer function will run when the plugin is instantiated
        * Plugins enter key event submission to host - can be configured
        * @method initializer
        * @return {void}
        */
        initializer:function(config){
            var t = this;

            t.eventListeners = [];
            // plugin all plugins
            t.inputNode.
                plug(Y.myc.Plugin.SearchAssist).
                plug(Y.myc.Plugin.Search,{
                    'local_count' : config.local_count
                });

            t.inputNode.search.on('query', function(){
                t.inputNode.assist.disabled = true;
                t.inputNode.assist.ddNode.addClass('querying');
            });

            t.inputNode.search.on('results', function(){
                t.inputNode.assist.disabled = false;
                t.inputNode.assist.ddNode.removeClass('querying');
            });

            if (config.latitude && config.longitude) {
                t.updateLatLon(config.latitude,config.longitude);
            }

            if (config.p2) {
                t.updateP2(config.p2);
            }

            if (config.type === 'directions') {
                t.inputNode.ac.get('boundingBox').addClass('directions-search-assist');
            }

            t.initEvents(config);
        },
        /**
        * @method hideAssist
        * @return {void}
        */
        hideAssist : function(){
            var t = this;
            Y.later(1000, {}, function(){
                t.inputNode.ac && t.inputNode.ac.hide();
            });
        },
        /**
        * @method clear
        * @return {void}
        */
        clear : function(){
            this.inputNode.search.clear();
        },
        /**
        * @method destructor
        * @return {void}
        */
        destructor : function(){
            this.eventListeners = Y.myc.util._destructor(this.eventListeners);
        }
    });

    Y.namespace('myc.Plugin');
    Y.myc.Plugin.Input = InputPlugin;

},'@VERSION@',{requires:[
    'plugin',
    'myc-search-assist-plugin',
    'myc-search-plugin',
    'myc-locdrop-plugin'
]});
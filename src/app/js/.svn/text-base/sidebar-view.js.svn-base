/**
 * Create a new myc-app-sidebar view class that extends Y.View and renders the current
 * state of a myc-app-sidebar instance.
 * @module myc-app-sidebar-view
 * @requires
    view,
    myc-app-templates,
    myc-app-sidebar-controlpanel-view,
    myc-config
*/
YUI.add('myc-app-sidebar-view', function(Y){

    var SidebarView = function(){
        SidebarView.superclass.constructor.apply(this, arguments);
    };
    // Attributes and static properties for myc-app-sidebar View.
    SidebarView.ATTRS = {
        currentLocationView : null,
        container : null,
        controlpanel : null,
        locationView : null,
        businessView : null,
        directionView : null,
        state : null
    };

    SidebarView.NAME = 'sidebarView';
    SidebarView.NS = 'app';

    Y.extend(SidebarView, Y.View, {
        // Assign base template that will be used to render view
        template: Y.myc.App.templates.sidebar,
        eventListeners : [],
        allowResize : true,
        // Specify delegated DOM events to attach to the myc-sidebar container.
        events:{
            '.sidebar-toggle button': {click: 'toggleClick'},
            '.sidebar-close': {click: 'sidebarCloseClick'}
        },
        /**
        * The initializer function will run when a view is instantiated
        * @method initializer
        * params {hash} config
        * @return {void}
        */
        initializer: function(config){
            var t = this;
            t.eventListeners = [];
            t.get('container').setContent(t.template());
            t.setAttrs({
                'controlpanel' : new Y.myc.App.Sidebar.Controlpanel.View({
                    container : Y.myc.config('containers.sidebarControlpanel')
                }),
                'state' : 'minimized'
            });
            t.get('controlpanel').addTarget(t);
        },
        /**
        * Hide all sidebar widgets
        * @method hideAll
        * @return {void}
        */
        hideAll : function(e){
            e = e || {};
            if (e.source !== 'location') {
                if (e.source !== 'directions') {
                    this.get('locationView').reset();
                }
                this.get('locationView').get('substitution').close();
            }
            if (e.source !== 'directions') {
                this.get('directionsView').close({
                    'removeMarkers' : false
                });
            }
            if (e.source !== 'business' && e.source !== 'directions') {
                this.get('businessView').reset();
            }
            this.reset();
            this.get('container').all('.sidebar-widget').each(function(e){e.hide();});
        },
        /**
        * Show Locations
        * @method showLocations
        * @param {object} data
        * @param {string} q
        * @return {void}
        */
        showLocations : function(data,q){
            this.hideAll({
                'source' : 'location'
            });
            this.get('locationView').clear();
            this.get('locationView').setAttrs({
                q : q,
                locations : data.locations || {},
                location : data.location || null,
                local : data.local
            });
            this.get('locationView').render({
                'updateState' : data.updateState === false ? false : true
            });
        },
        /**
        * Show business
        * @method showBusiness
        * @param {object} data
        * @param {string} q
        * @return {void}
        */
        showBusiness : function(data,q){
            var nearbyLocation = this.get('locationView').get('location') || this.get('businessView').get('nearbyLocation') || null;
            this.hideAll({
                'source' : 'business'
            });
            this.get('businessView').clear();
            this.get('businessView').setAttrs({
                location : data.location,
                q : q,
                businesses : data.businesses || null,
                local : data.local || null,
                pageNumber : data.pageNumber || 1,
                hiConfFlag : (data.hiConfFlag === false) ? false : true,
                showLocationName : data.hname ? false : true,
                showLocationMarker : (Y.Lang.isUndefined(data.showLocationMarker)) ? true : data.showLocationMarker,
                centeringEnabled : data.centeringEnabled || true,
                requeryParams : data.requeryParams,
                businessMap : data.businessMap,
                nearbyLocation : nearbyLocation
            });
            this.set('state','maximized');
            this.get('businessView').render();
        },
        /**
        * Show directions
        * @method showDirections
        * @param {object} data
        * @param {string} q
        * @return {void}
        */
        showDirections : function(data,q,source){
            data = data || null;
            q = q || null;
            source = source || null;

            var t = this,
                currentAllowed;
            // IF DATA IS BEING PASSED
            if (data && source !== 'context-menu') {
                t.get('directionsView').render(true);
                // We will not be entering if condition as part of 6105735 fix
                if (Y.Lang.isArray(data.directions)) {
                    if (source !== 'onebox') {
                        // TODO : Taking it for granted that this case can occur only
                        // with business
                        t.get('businessView').reset();
                    }
                    Y.each(data.directions, function(location,index){
                        t.get('directionsView').addWaypoint({
                            index : index,
                            location : location,
                            submit : true,
                            waypointsLength : data.directions.length,
                            eSource : source
                        });
                    });
                } else {
                    // IF CURRENT LOCATION EXISTS
                    currentAllowed = data.location.get('type') === 'current' ? false : true;
                    t.get('locationView').reset();
                    // created exception case for location direction marker present within business view
                    if (data.active === 'businesses') {
                        t.get('businessView').reset();
                    }
                    t.get('directionsView').addWaypoint({
                        type :  (data.location.get('type') === 'initialCurrent' || data.location.get('type') === 'current') ? 'origin' : 'destination',
                        location : data.location,
                        submit : true,
                        eSource : source
                    });
                    if (currentAllowed !== false && t.get('currentLocationView').get('model').get('location')) {
                        t.get('directionsView').addWaypoint({
                            type : data.type || 'origin',
                            location : t.get('currentLocationView').get('model').get('location'),
                            eSource : source,
                            submit : true
                        });
                    }
                }
            } else if (!t.get('directionsView').get('container').hasClass('active')) {
                var location;

                t.get('directionsView').render(true);
                // IF LOCATION HAS BEEN SEARCHED - Only works 1st time. Second time the
                // search is cleared
                if (t.get('locationView').get('location')) {
                    if (t.get('locationView').get('location').get('type') === 'current' || source==='context-menu') {
                        currentAllowed = false;
                    }
                    location = t.get('locationView').get('location');
                    t.get('locationView').reset();
                    t.get('directionsView').addWaypoint({
                        type : (location.get('type') === 'initialCurrent' || location.get('type') === 'current') ? 'origin' : 'destination',
                        location : location,
                        eSource : source
                    });
                }

                // IF BUSINESS HAS BEEN SEARCHED - Only works 1st time. Second time the
                // search is cleared
                if (t.get('businessView').get('nearbyLocation') && t.get('businessView').get('showLocationName')) {
                    if (t.get('businessView').get('nearbyLocation').get('type') === 'current' || source==='context-menu') {
                        currentAllowed = false;
                    }
                    location = t.get('businessView').get('nearbyLocation');
                    t.get('businessView').reset();
                    t.get('directionsView').addWaypoint({
                        type : (location.get('type') === 'initialCurrent' || location.get('type') === 'current') ? 'origin' : 'destination',
                        location : location,
                        eSource : source
                    });
                }

                // IF CURRENT LOCATION EXISTS
                if (currentAllowed !== false && t.get('currentLocationView').get('model').get('location')) {
                    t.get('directionsView').addWaypoint({
                        type : 'origin',
                        location : t.get('currentLocationView').get('model').get('location'),
                        eSource : source
                    });
                }
            } else {
                t.get('directionsView').render();
            }
            if (source === 'sidebar direction click') {
                t.resize({'source':'get direction show','scrollTop':0});
            }
            t.set('state','maximized');
        },
        /**
        * @method toggleNotification
        * using opacity transistion
        */
        toggleNotification : function(e){
            Y.log('Sidebar View : toggleNotification Called');
            e = e || {};
            var t = this,
                notificationContainer = t.get('container').one('.sidebar-notification'),
                opacity;

            if (e.type === 'show') {
                opacity = 1;

            } else {
                opacity = 0;
            }
            t.get('container').one('.sidebar-toggle').show();
            notificationContainer.transition({
                opacity: {
                    delay: Y.myc.config('transition.delay'),
                    duration: Y.Lang.isValue(e.duration) ? e.duration : Y.myc.config('transition.duration'),
                    easing: Y.myc.config('transition.easing'),
                    value: opacity
                },
                on: {
                    start: function() {
                        if (Y.myc.util.checkNodeHidden(t.get('container')) === true && e.type === 'show') {
                            t.get('container').show(true);
                        }
                        if (opacity === 1 && Y.myc.util.checkNodeHidden(notificationContainer) === true) {
                            notificationContainer.show();
                        }
                        if (notificationContainer.one('.sidebar-title').getContent()) {
                            notificationContainer.setStyle('height','');
                            notificationContainer.setStyle('height',notificationContainer.get('offsetHeight'));
                        }
                    },
                    end: function() {
                        if (notificationContainer.one('.sidebar-title').getContent()) {
                            notificationContainer.setStyle('height','');
                            notificationContainer.setStyle('height',notificationContainer.get('offsetHeight'));
                        }
                        if (e.resize !== false) {
                            t.resize();
                        }
                        if (opacity === 0) {
                            notificationContainer.hide();
                        }
                    }
                }
            });
        },
        /**
        * @method clearNotification
        */
        clearNotification : function(e){
            this.get('container').one('.sidebar-notification').one('.sidebar-title').empty();
            this.get('container').one('.sidebar-toggle').hide();
        },
        /**
        * Show Share
        * @method showShare
        * @param {object} data
        * @param {string} q
        * @return {void}
        */
        showShare : function(e){
            this.get('controlpanel').get('shareOverlayView').render(e);
            this.fire('share:show');
        },
        /**
        * render control panel. resize sidebar
        * @method render
        * @return {void}
        */
        render : function(){
            this.get('controlpanel').render();
        },
        /**
        * resize sidebar
        * @method resize
        * @param {object} dimesions
        * @return {void}
        */
        resize : function(e){
            Y.log('Sidebar View : Resize Called');
            e = e || {};
            if (this.allowResize) {
                var t = this,
                    maxHeight = 0,
                    sidebarContentHeight = 0;

                t.get('container').one('.sidebar-notification').removeClass('no-border');

                // STEP 1 - MAKE SIDE BAR VISIBLE
                if (Y.myc.util.checkNodeHidden(this.get('container')) === true && e.hide !== true) {
                    t.get('container').show(true);
                }

                // STEP 2 - GET MAX HEIGHT
                maxHeight = (e && Y.Lang.isValue(e.height)) || (Y.one('body').get('offsetHeight') - (Y.one('#myc-sidebar-content .main-content') ? Y.one('#myc-sidebar-content .main-content').getXY()[1] : 0)),
                maxHeight = (maxHeight !== 0) ? (maxHeight - 20) : maxHeight;

                // STEP 3 - RESET SIDEBAR HEIGHT
                sidebarContentHeight = t.get('container').one('.main-content').one('.main-content-container').get('offsetHeight');
                // STEP 4 - GET HEIGHT
                height = Math.max(Math.min(maxHeight,sidebarContentHeight),0);
                // STEP 6 - TRANSITION
                if (e.forceTransition === true || (Math.round(parseFloat(height,10)) !== Math.round(parseFloat(t.get('container').one('.main-content').getComputedStyle('height').replace('px',''),10)))) {
                    t.get('container').one('.main-content').transition({
                        height: {
                            delay: Y.myc.config('transition.delay'),
                            duration: Y.myc.config('transition.duration'),
                            easing: Y.myc.config('transition.easing'),
                            value: height+'px'
                        },
                        on: {
                            start: function() {
                                Y.log('Sidebar View : Resize : Transition start');
                                if (sidebarContentHeight > height) {
                                    t.get('container').one('.main-content').set('scrollTop',0);
                                }
                                if (sidebarContentHeight < maxHeight) {
                                    t.get('container').one('.main-content').addClass('nooverflow');
                                }
                                if (sidebarContentHeight === height && height === 0) {
                                    t.get('container').hide();
                                }
                            },
                            end: function() {
                                Y.log('Sidebar View : Resize : Transition End');
                                if (sidebarContentHeight > height) {
                                    t.get('container').one('.main-content').removeClass('nooverflow');
                                    t.get('container').one('.main-content').set('scrollTop',0);
                                }
                                if (e.hide === true && t.get('container').one('.main-content').get('offsetHeight') === 0) {
                                    t.get('container').hide();
                                }
                                if (height === 0) {
                                    t.get('container').one('.sidebar-notification').addClass('no-border');
                                }
                                t.fire('resize:complete');
                            }
                        }
                    });
                } else if (height === 0) {
                    t.get('container').hide(true);
                } else {
                    if (e.scrollTop === 0) {
                        t.get('container').one('.main-content').set('scrollTop',0);
                    }
                    t.fire('resize:complete');
                }
            }
        },
        /**
        * hide/show sidebar
        * @method toggle
        * @params {e} e
        * @return {void}
        */
        toggle : function(e){
            e = e || {};
            var t = this,
                target = e.currentTarget || t.get('container').one('.sidebar-toggle button'),
                parent = target.ancestor('.sidebar-toggle');

            if (parent.hasClass('minimize')) {
                target
                    .set('title','Show')
                    .one('.description').setContent('Show');

                parent
                    .removeClass('minimize')
                    .addClass('maximize');

                t.set('state','minimized');
                t.resize({forceTransition:true,height:0});
                t.allowResize = false;
                t.fire('minimize',{source:e.source});
            } else {
                target
                    .set('title','Hide')
                    .one('.description').setContent('Hide');
                parent
                    .removeClass('maximize')
                    .addClass('minimize');
                t.allowResize = true;
                t.set('state','maximized');
                t.resize({forceTransition:true});
                t.fire('maximize',{source:e.source});
            }
        },
        /**
        * @method resetSidebar
        * @return {void}
        */
        resetSidebar : function(){
            this.get('container').one('.sidebar-toggle').one('button')
                .set('title','Hide')
                .one('.description').setContent('Hide');

            this.get('container').one('.sidebar-toggle')
                .removeClass('maximize')
                .addClass('minimize');

            this.set('state','minimized');
            this.allowResize = true;
        },
        /**
        * @method reset
        * @return {void}
        */
        reset : function(e){
            e = e || {};
            this.resetSidebar();
            if (e.sidebarNotification === 'clear') {
                this.clearNotification();
            } else {
                this.toggleNotification({type:'hide',duration:0,resize:e.resize || false});
            }
        },
        /**
        * @method destructor
        * @return {void}
        */
        destructor : function(){
            this.eventListeners = Y.myc.util._destructor(this.eventListeners);
        },

        // -- Event Handlers -------------------------------------------------------

        /**
        * @method toggleClick
        * @params {e} e
        * @return {void}
        */
        toggleClick : function(e){
            this.fire('toggleClick',{
                'node' : e.currentTarget
            });
        },
        /**
        * @method sidebarCloseClick
        * @params {e} e
        * @return {void}
        */
        sidebarCloseClick : function(e){
            this.resize({forceTransition:true,height:0,hide:true});
            this.allowResize = false;
            this.set('state','minimized');
        }
    });

    Y.namespace('myc.App.Sidebar');
    Y.myc.App.Sidebar.View = SidebarView;

}, '@VERSION@',{
    requires:[
        'view',
        'myc-app-templates',
        'myc-app-sidebar-controlpanel-view',
        'myc-config'
    ]
});
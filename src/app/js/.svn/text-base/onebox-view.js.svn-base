/**
 * Create a new myc-app-onebox view class that extends Y.View and renders the current
 * state of a myc-app-onebox instance.
 * @module myc-app-onebox-view
 * @requires
    view,
    myc-input-plugin
*/
YUI.add('myc-app-onebox-view', function(Y){

    var OneBoxView = function(){
        OneBoxView.superclass.constructor.apply(this, arguments);
    };
    // Attributes and static properties for myc-app-onebox View.
    OneBoxView.ATTRS = {
        input : null,
        ariaContainer : null,
        state:{
            getter: function(){
                var q = this.get('input').get('value');
                return q?{q:q}:{};
            }
        }
    };

    OneBoxView.NAME = 'oneBoxView';
    OneBoxView.NS = 'app';

    Y.extend(OneBoxView, Y.View, {
        events:{
            // Events for old header
            '.form-submit':{
                'click':'submitForm'
            },
            '.y-search':{
                'click':'searchWebClick'
            },
            // End of events for old header
            '.yucs-vsearch-button':{
                'click':'submitForm'
            },
            '.yucs-wsearch-button':{
                'click':'searchWebClick'
            }
        },
        eventListeners : [],
        /**
        * @method initEvents
        * @return {void}
        */
        initEvents: function(){
            var t = this,
                inputListener,
                searchListener;

            inputListener = t.get('input').inputplugin.on({
                'value:changed' : function(e){
                    t.fire('value:changed',e);
                },
                'select' : function(e){
                    t.submit(e.sa);
                },
                'found' : function(e){
                   t.get('ariaContainer').empty();
                   t.fire('found',e);
                }
            });
            t.eventListeners.push(inputListener);

            searchListener = t.get('input').search.on({
                'error' : function(response){
                    t.get('ariaContainer').empty();
                    t.fire('error',response);
                },
                'selected:currentLocation' : function(){
                    t.fire('selected:currentLocation');
                }
            });
            t.eventListeners.push(searchListener);
        },
        /**
        * The initializer function will run when a view is instantiated
        * @method initializer
        * params {hash} config
        * @return {void}
        */
        initializer: function(config){
            this.eventListeners = [];
            this.set('ariaContainer',Y.one(config.ariaContainer));
            this.set('input',this.get('container').one('form').one('input[type="text"]'));
            this.get('input').plug(Y.myc.Plugin.Input,{
                'type' : 'onebox'
            });
            this.initEvents();
        },
        /**  
        * @method render - method specific to old header  
        * @return {void}    
        */
        render : function(){
            this.layoutUpdate();
        },
        /**
        * @method getValue
        * @return {string} value
        */
        getValue : function(){
            return Y.Lang.trim(this.get('input').get('value'));
        },
        /**
        * @method focus
        * @return {void}
        */
        focus: function(){
            this.get('input').focus();
        },
        /*
        * @method layoutUpdate - method specific to old header     
        * @return {void}    
        */
        layoutUpdate : function(){
            if (Y.one('#yuhead-hd')) {
                var c = this.get('container'),
                    searchWidth = Y.one('#yuhead-bd').get('offsetWidth') - (Y.one('.yuhead-logo').get('offsetWidth'));

                // extracted max width from header css
                searchWidth = Math.min(searchWidth,620);
                Y.one('#yuhead-search').setStyle('width',searchWidth+'px');
                c.one('.search').setStyle('width',c.get('offsetWidth')-c.one('.form-buttons').get('offsetWidth')-58+'px');
            }
        },
        /**
        * @method destructor
        * @return {void}
        */
        destructor : function(){
            this.eventListeners = Y.myc.util._destructor(this.eventListeners);
        },
        /**
        * @method submit
        * @return {void}
        */
        submit : function(sa){
            this.fire('submit',{
                sa : sa
            });
            // TODO : YALA Translation
            this.get('ariaContainer').setContent('Finding');
        },
        /**
        * @method clear
        * @return {void}
        */
        clear : function(e){
            this.get('input').set('value','');
        },

        // -- Event Handlers -------------------------------------------------------

        /**
        * only submit if input has value
        * form submit
        * @method submit
        * @params {e} e
        * @return {void}
        */
        submitForm : function(e){
            e.preventDefault();
            //submit only if one box has value
            if (this.getValue()) {
                this.get('input').inputplugin._query(e);
            }
            return false;
        },
        /**
        * @method searchWebClick
        * @params {e} e
        * @return {void}
        */
        searchWebClick : function(e){
            e.preventDefault();
            if (this.getValue()) {
                window.open('http://search.yahoo.com/search?'+Y.QueryString.stringify({p:this.getValue()}));
            }
            return false;
        }
    });

    Y.namespace('myc.App.OneBox');
    Y.myc.App.OneBox.View = OneBoxView;

}, '@VERSION@',{
    requires:[
        'view',
        'myc-input-plugin'
    ]
});